extern undefined;
extern console;
extern process;
extern snarf;
extern print;
extern memory;
extern assertEq;

let NODE_JS = 1;
let JS_SHELL = 2;
let BROWSER = 3;


struct Body {
  double x, y, mass;
};


let mode;
if (typeof process !== "undefined") {
  mode = NODE_JS;
} else if (typeof snarf !== "undefined") {
  mode = JS_SHELL;
} else {
  mode = BROWSER;
}

let m, assert, assertTrue;
if (mode === NODE_JS) {
  m = require('memory');
  print = console.log;
  assert = require('assert').strictEqual;
  assertTrue = require('assert').ok;
} else {
  m = memory;
  //(load('memory.js'), memory);
  assert = assertEq;
  assertTrue = function(val) { assert(val, true); }
}


struct Node {
  u16 value;
  u16 other;
};

// (byte, [{membyte: byte*}] -> bool
function isIn(byte *x, l) {
  return l.some(function(el, idx) {
    return el.membyte === x;
  });
}

let checker = m.memcheck;

function test_access() {
  function badGetU8() {
    let u8 *x = new u8;
    *x = 5;
    let u8 *badp = x + 1;
    let u8 good = *x;
    let u8 bad = *badp;
    let errors = checker.getBadAccesses();
    
    assert(1, errors.length, "only had one bad access");
    
    assertTrue(isIn(badp, errors),
              "tried to get a unalloced u8 pointer");
    let trace = errors[0].trace;
    assertTrue(trace[trace.length-1].indexOf("badGetU8") !== -1);
  }
  
  function badGetI8() {
    let i8 *x = new i8;
    *x = 5;
    let i8 *badp = x + 1;
    let i8 good = *x;
    let i8 bad = *badp;

    assert(1, checker.getBadAccesses().length,
          "only had one bad access");
    assertTrue(isIn(badp, checker.getBadAccesses()),
              "tried to get a unalloced i8 pointer");
  }
  
  function badGetU32() {
    let u32 *x = new int;
    *x = 5;
    let u32 *badp = x + 1;
    let u32 good = *x;
    let u32 bad = *badp;
    
    assert(1, checker.getBadAccesses().length,
          "only had one bad access");
    assertTrue(isIn(badp, checker.getBadAccesses()),
              "tried to get a unalloced u32 pointer");
  }

  function badGetMixed() {
    // warm up some allocs
    for(let uint i = 0; i < 100; i++) {
      let u32 *x = new u32;
      // leaking all over the places but we don't care
    }
    let u32 *good = new u32;
    let u32 *badp = good + 1;
    
    // bad dereference
    let u32 bad = *badp;
    
    assert(1, checker.getBadAccesses().length,
          "only had one bad access");
    assertTrue(isIn(badp, checker.getBadAccesses()),
              "tried to get a unalloced u32 pointer");
  }
  
  function badSet() {
    let int *badp;
    *badp = 4;
    assert(1, checker.getBadAccesses().length,
          "only had one bad access");
    assertTrue(isIn(badp, checker.getBadAccesses()),
              "tried to set a unalloced int pointer");
  }
  
  function getMultiple() {
    let u8 *x = new u8;
    let u8 *y = new u8;
    
    let u8 *badx = x + 1;
    let u8 *bady = y + 1;
    
    let u8 good = *x;
    good = *y;
    
    let u8 bad = *badx;
    bad = *bady

    assert(2, checker.getBadAccesses().length,
          "only had one bad access");
    assertTrue(isIn(badx, checker.getBadAccesses()),
              "tried to get a unalloced u8 pointer");
    assertTrue(isIn(bady, checker.getBadAccesses()),
              "tried to get a unalloced u8 pointer");
  }

  function getAfterDelete() {
    let u8 *x = new u8;
    delete x;
    *x
    assert(1, checker.getBadAccesses().length,
          "only had one bad access");
    assertTrue(isIn(x, checker.getBadAccesses()),
              "tried to get a unalloced u8 pointer");
  }

  function getStruct() {
    let Body *b = new Body;
    
    b->x = 5;
    b->y = 10;
    b->mass = 100;
    
    assert(0, checker.getBadAccesses().length,
          "had no bad accesses");
  }

  print("running bad access tests (gets/sets of unallocated memory)...");
  
  m.reset();
  badGetU8();
  
  m.reset();
  badGetI8();
  
  m.reset();
  badGetU32();
  
  m.reset();
  badGetMixed();
  
  m.reset();
  badSet();
  
  m.reset();
  getMultiple();
  
  m.reset();
  getAfterDelete();
  
  m.reset();
  getStruct();
  
  print("passed");
  m.reset();
}

function test_undefined() {
  function undefU8() {
    let u8 *x = new u8;
    *x;
    
    let errors = checker.getBadUndefined();
    
    assert(1, errors.length,
          "only had one bad access");
    
    assertTrue(isIn(x, errors),
              "tried to get a undef u8 location");
    let trace = errors[0].trace;
    assertTrue(trace[trace.length-1].indexOf("undefU8") !== -1);
  }
  
  function undefU32() {
    let u32 *x = new u32;
    *x;
    
    assert(1, checker.getBadUndefined().length,
          "only had one bad access");
    assertTrue(isIn(x, checker.getBadUndefined()),
              "tried to get a undef u32 location");
  }

  function undefMultiple() {
    let u32 *x = new u32;
    let u32 *y = new u32;
    *x;
    *y;
    
    assert(2, checker.getBadUndefined().length,
          "only had one bad access");
    assertTrue(isIn(x, checker.getBadUndefined()),
              "tried to get a undef u32 location");
    assertTrue(isIn(y, checker.getBadUndefined()),
              "tried to get a undef u32 location");
  }

  // we are tracking undefined memory at the byte level
  function undefByte() {
    let u32 *x = new u32;
    let u8 *y = x;
    *y = 42;
    // can dereference both x and y now
    *y
    *x
    assert(0, checker.getBadUndefined().length,
          "nothing bad yet");
    let u8 *z = y + 1;
    *z
    assert(1, checker.getBadUndefined().length,
          "now bad");
    assertTrue(isIn(z, checker.getBadUndefined()),
              "tried to get a undef u8 location");
  }
  
  print("running undefined tests (gets of allocated but undefined memory)...");
  
  m.reset();
  undefU8();
  
  m.reset();
  undefU32();
  
  m.reset();
  undefMultiple();
  
  m.reset();
  undefByte();
  
  print("passed");
  m.reset();
}

function test_frees() {
  function badFree() {
    let u32 *x;
    delete x;
    
    assert(1, checker.getBadFrees().length,
          "only had one bad access");
    assertTrue(isIn(x, checker.getBadFrees()),
              "tried to free unalloced memory");
    let trace = checker.getBadFrees()[0].trace;
    assertTrue(trace[trace.length-1].indexOf("badFree") !== -1);
  }
  
  function doubleFree() {
    let u32 *x = new u32;
    delete x;
    delete x;
    
    assert(1, checker.getBadFrees().length,
          "only had one bad access");
    assertTrue(isIn(x, checker.getBadFrees()),
              "tried to double free");
  }
  
  print("running free tests (double frees, or general frees of unalloced memory)...");
  
  m.reset();
  badFree();
  
  m.reset();
  doubleFree();
  
  print("passed");
  m.reset();
}


function test_leak() {
  function int leak() {
    let int *x = new int;
    
    assert(checker.getLeaks().length, 1,
          "only had one leak ");
    assert((byte *) (x), checker.getLeaks()[0].membyte,
              "leaked an int");
    let trace = checker.getLeaks()[0].trace;
    assertTrue(trace[trace.length-1].indexOf("leak") !== -1);
  }

  function leakLoop() {
    let u8 *x = new u8;
    for(let int i = 0; i < 99; i++) {
      x = new u8;
    }

    assert(100, checker.getLeaks().length,
          "had one hundred leaks");
  }
  
  print("running leak tests (forgot to call delete)...");
  
  m.reset();
  leak();
  
  m.reset();
  leakLoop();
  
  print("passed");
  m.reset();
}

function test_callstack() {
  function a() {
    b();
  }
  function b() {
    throw "error!"
  }

  try {
    a();
  } catch (e) {
    let uint *x;
    *x;
    
    let errors = checker.getBadAccesses();
    assert(1, errors.length, "only had one bad access");
    assertTrue(errors[0].trace[0].indexOf("test_callstack") !== -1,
              "this function should be on the top of the callstack")
    print("passed")
  }

}

test_access();
test_undefined();
test_frees();
test_leak();

test_callstack();
